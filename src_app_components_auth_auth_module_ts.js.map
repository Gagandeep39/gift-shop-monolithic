{"version":3,"file":"src_app_components_auth_auth_module_ts.js","mappings":"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","sources":["./src/app/components/auth/auth-routing.module.ts","./src/app/components/auth/auth.component.ts","./src/app/components/auth/auth.component.html","./src/app/components/auth/auth.module.ts","./src/app/components/auth/change-password/change-password.component.ts","./src/app/components/auth/change-password/change-password.component.html","./src/app/components/auth/login/login.component.ts","./src/app/components/auth/login/login.component.html","./src/app/components/auth/register/register.component.ts","./src/app/components/auth/register/register.component.html","./src/app/components/auth/request-question/request-question.component.ts","./src/app/components/auth/request-question/request-question.component.html","./src/app/components/auth/social-register/social-register.component.ts","./src/app/components/auth/social-register/social-register.component.html","./src/app/guards/auth-access.guard.ts","./src/app/services/social-auth.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthAccessGuard } from 'src/app/guards/auth-access.guard';\nimport { AuthComponent } from './auth.component';\nimport { ChangePasswordComponent } from './change-password/change-password.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { RequestQuestionComponent } from './request-question/request-question.component';\nimport { SocialRegisterComponent } from './social-register/social-register.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AuthComponent,\n    canActivate: [AuthAccessGuard],\n    children: [\n      {\n        path: 'login',\n        component: LoginComponent,\n      },\n      {\n        path: 'register',\n        component: RegisterComponent,\n      },\n      {\n        path: 'socialregister',\n        component: SocialRegisterComponent,\n      },\n      {\n        path: 'forgotpassword',\n        component: RequestQuestionComponent,\n      },\n      {\n        path: 'changepassword',\n        component: ChangePasswordComponent,\n      },\n    ],\n  }\n]\n\n@NgModule({\n  declarations: [],\n  imports: [\n    RouterModule.forChild(routes),\n  ],\n  exports: [\n    RouterModule,\n  ]\n})\nexport class AuthRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss']\n})\nexport class AuthComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"backdrop\"></div>\n<router-outlet></router-outlet>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { ChangePasswordComponent } from './change-password/change-password.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { RequestQuestionComponent } from './request-question/request-question.component';\nimport { SocialRegisterComponent } from './social-register/social-register.component';\nimport { AuthComponent } from './auth.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\n\n\n@NgModule({\n  declarations: [\n    ChangePasswordComponent,\n    LoginComponent,\n    RegisterComponent,\n    RequestQuestionComponent,\n    SocialRegisterComponent,\n    AuthComponent,\n  ],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    ReactiveFormsModule,\n    SharedModule,\n  ]\n})\nexport class AuthModule { }\n","/**\n * @author Gagandeep Singh\n * @email singh.gagandeep3911@gmail.com\n * @create date 2021-01-22 01:46:15\n * @modify date 2021-01-22 01:46:15\n * @desc [description]\n */\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { EventService } from 'src/app/services/event.service';\nimport { LoadingService } from 'src/app/services/loading.service';\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.scss'],\n})\nexport class ChangePasswordComponent implements OnInit, OnDestroy {\n  resetPasswordForm: UntypedFormGroup;\n  submitted = false;\n  success = false;\n  question = 'Not Found';\n  resetPasswordSubscription: Subscription;\n\n  constructor(\n    private authService: AuthService,\n    public loadingService: LoadingService,\n    private router: Router,\n    private eventService: EventService\n  ) {}\n\n  ngOnDestroy(): void {\n    if (this.resetPasswordSubscription)\n      this.resetPasswordSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.initPasswordResetForm();\n  }\n\n  resetPassword() {\n    this.submitted = true;\n    if (this.resetPasswordForm.valid)\n      this.submitResetForm(this.resetPasswordForm.getRawValue());\n  }\n\n  submitResetForm(formData) {\n    formData.username;\n    this.loadingService.enableLoading();\n    this.resetPasswordSubscription = this.authService\n      .requestPasswordReset(formData)\n      .subscribe(\n        (response) => {\n          this.success = true;\n          setTimeout(() => {\n            this.router.navigateByUrl('/auth/login');\n          }, 3000);\n          this.loadingService.disableLoading();\n        },\n        (error) => {\n          this.loadingService.disableLoading();\n          \n          if (error.error.message === 'FieldException')\n            error.error.errors.forEach((element) =>\n              this.resetPasswordForm.controls[element.field]?.setErrors({\n                serverValidationError: element.message,\n              })\n            );\n          else throw new Error(error);\n        }\n      );\n  }\n\n  initPasswordResetForm() {\n    const res = this.eventService.resetPasswordData.value;\n    if (res === null) this.router.navigateByUrl('/auth/forgotpassword');\n    this.question = res?.securityQuestion;\n    this.resetPasswordForm = new UntypedFormGroup({\n      username: new UntypedFormControl({ value: res?.username, disabled: true }, [\n        Validators.required,\n      ]),\n      newPassword: new UntypedFormControl('', [Validators.required]),\n      securityAnswer: new UntypedFormControl('', [Validators.required]),\n    });\n  }\n}\n","<div class=\"row h-100 align-items-center\">\n  <div class=\"col-12\">\n    <div class=\"my-card mx-auto\">\n      <div class=\"row\">\n        <div class=\"col-6 front-img\">\n        </div>\n        <div class=\"col-6 user-form\">\n          <div class=\"p-5\">\n            <div class=\"text-center logo-container\">\n              <img class=\"logo\" [routerLink]=\"['/']\" src=\"assets/images/gift-box.svg\" />\n              <img class=\"title\" [routerLink]=\"['/']\" src=\"assets/images/logo-text.png\" />\n              <hr>\n            </div>\n            <form\n            class=\"user\"\n            [formGroup]=\"resetPasswordForm\"\n            (ngSubmit)=\"resetPassword()\"\n          >\n            <div class=\"form-group\">\n              <input\n                class=\"form-control form-control-user\"\n                type=\"username\"\n                formControlName=\"username\"\n                placeholder=\"Username\"\n                name=\"username\"\n              />\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"securityAnswer\">\n                {{ question }}\n              </label>\n              <input\n                class=\"form-control form-control-user\"\n                type=\"text\"\n                formControlName=\"securityAnswer\"\n                type=\"text\"\n                placeholder=\"Enter Answer\"\n                name=\"securityAnswer\"\n                [ngClass]=\"{'is-invalid':submitted && resetPasswordForm.get('securityAnswer').invalid}\"\n              />\n              <div class=\"invalid-feedback\" *ngIf=\"submitted && resetPasswordForm.get('securityAnswer').invalid\">\n                <div *ngIf=\"resetPasswordForm.get('securityAnswer').errors['required']\">\n                  * Required\n                </div>\n                <div *ngIf=\"resetPasswordForm.get('securityAnswer').errors['serverValidationError']\">\n                  {{resetPasswordForm.controls[\"securityAnswer\"].errors.serverValidationError}}\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-group\">\n              <input\n                class=\"form-control form-control-user\"\n                type=\"password\"\n                formControlName=\"newPassword\"\n                id=\"newPassword\"\n                placeholder=\"Enter New Password\"\n                name=\"newPassword\"\n                [ngClass]=\"{'is-invalid':submitted && resetPasswordForm.get('newPassword').invalid}\"\n              />\n              <div class=\"invalid-feedback\" *ngIf=\"submitted && resetPasswordForm.get('newPassword').invalid\">\n                <div *ngIf=\"resetPasswordForm.get('newPassword').errors['required']\">\n                  * Required\n                </div>\n                <div *ngIf=\"resetPasswordForm.get('newPassword').errors['serverValidationError']\">\n                  {{resetPasswordForm.controls[\"newPassword\"].errors.serverValidationError}}\n                </div>\n              </div>\n            </div>\n            <button\n              class=\"primary-btn btn-block\"\n              type=\"submit\"\n            >\n              <span\n                *ngIf=\"loadingService.loading\"\n                class=\"spinner-border spinner-border-sm\"\n              ></span>\n              Reset Password\n            </button>\n          </form>\n          <br>\n          <!-- <hr /> -->\n          <div *ngIf=\"success\" class=\"alert alert-success\" role=\"alert\">\n            Sucessfully Updated Password\n          </div>\n          <div class=\"text-center\">\n            <a class=\"mr-1 actions\" [routerLink]=\"['/auth/forgotpassword']\">Back</a>\n            |\n            <a class=\"ml-1 actions\" [routerLink]=\"['/auth/login']\"> Login</a>\n          </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","/**\n * @author Gagandeep Singh\n * @email singh.gagandeep3911@gmail.com\n * @create date 2021-01-22 01:46:26\n * @modify date 2021-01-22 01:46:26\n * @desc [description]\n */\nimport { Component, NgZone, OnInit } from '@angular/core';\nimport {\n  UntypedFormControl,\n  UntypedFormGroup,\n  Validators,\n} from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { LoadingService } from 'src/app/services/loading.service';\nimport { SocialAuthService } from 'src/app/services/social-auth.service';\nimport { environment } from 'src/environments/environment';\n\ndeclare const gapi: any;\ndeclare const FB: any;\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  loginForm: UntypedFormGroup;\n  submitted = false;\n  loginSubscription: Subscription;\n  returnUrl;\n  googleLogin;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    public loadingService: LoadingService,\n    private route: ActivatedRoute,\n    private socialAuthService: SocialAuthService,\n    private ngZone: NgZone\n  ) {}\n\n  ngOnDestroy(): void {\n    if (this.loginSubscription) this.loginSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.authService.redirectIfLoggedIn();\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    this.initForm();\n    (window as any).googleLogin = this.googleLogin;\n  }\n\n  login() {\n    this.submitted = true;\n    if (this.loginForm.valid) this.submitData(this.loginForm.value);\n  }\n\n  submitData(formData: any) {\n    this.loadingService.enableLoading();\n    this.loginSubscription = this.authService.login(formData).subscribe(\n      (response) => {\n        this.router.navigateByUrl(this.returnUrl);\n        this.loadingService.disableLoading();\n      },\n      (error) => {\n        this.loadingService.disableLoading();\n        if (error.error.message === 'FieldException')\n          error.error.errors.forEach((element) =>\n            this.loginForm.controls[element.field]?.setErrors({\n              serverValidationError: element.message,\n            })\n          );\n        else throw new Error(error);\n      }\n    );\n  }\n\n  initForm() {\n    this.loginForm = new UntypedFormGroup({\n      username: new UntypedFormControl('', [Validators.required]),\n      password: new UntypedFormControl('', [Validators.required]),\n    });\n  }\n\n  // Google sign in\n  auth2;\n  logo = '^assets/images/btn_google_light_normal.svg';\n\n  public googleInit() {\n    gapi.load('auth2', () => {\n      this.auth2 = gapi.auth2.init({\n        client_id: environment.googleClientId,\n      });\n      this.attachSignin(document.getElementById('googleBtn'));\n    });\n  }\n  public attachSignin(element) {\n    this.auth2.attachClickHandler(element, {}, (googleUser) =>\n      this.ngZone.run(\n        () => {\n          this.loadingService.enableLoading();\n          this.socialAuthService\n            .validateGoogleTokenAndLogin({\n              token: googleUser.getAuthResponse().id_token,\n              email: googleUser.getBasicProfile().getEmail(),\n            })\n            .subscribe((res) => {\n              this.loadingService.disableLoading();\n              if (res['status'] !== 202)\n                this.router.navigateByUrl(this.returnUrl);\n              else {\n                this.router.navigate(['/auth/socialregister'], {\n                  state: {\n                    data: { emailId: googleUser.getBasicProfile().getEmail() },\n                  },\n                });\n              }\n            }).closed;\n        },\n        (error) => console.error(error)\n      )\n    );\n  }\n\n  ngAfterViewInit() {\n    this.googleInit();\n    this.facebookInit();\n  }\n\n  facebookInit() {\n    (window as any).fbAsyncInit = function () {\n      FB.init({\n        appId: environment.facebookClientId,\n        cookie: true,\n        xfbml: true,\n        version: 'v3.1',\n      });\n      FB.AppEvents.logPageView();\n    };\n\n    (function (d, s, id) {\n      var js,\n        fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {\n        return;\n      }\n      js = d.createElement(s);\n      js.id = id;\n      js.src = 'https://connect.facebook.net/en_US/sdk.js';\n      fjs.parentNode.insertBefore(js, fjs);\n    })(document, 'script', 'facebook-jssdk');\n  }\n\n  submitLogin() {\n    FB.login((response) =>\n      this.ngZone.run(() => {\n        if (response.authResponse) {\n          FB.api('/me', { fields: 'name, email' }, (res) => {\n\n            this.loadingService.enableLoading();\n            this.socialAuthService\n              .validateFacebookTokenAndLogin({\n                token: response.authResponse.accessToken,\n                email: res.email,\n              })\n              .subscribe((res) => {\n                this.loadingService.disableLoading();\n                if (res['status'] !== 202)\n                  this.router.navigateByUrl(this.returnUrl);\n                else {\n                  this.router.navigate(['/auth/socialregister'], {\n                    state: {\n                      data: { emailId: response.email },\n                    },\n                  });\n                }\n              }).closed;\n          });\n        } else throw Error('Error Signing from facebook');\n      })\n    );\n  }\n}\n\n/**\n * Fetch Other google sign in info\n * \n  let profile = googleUser.getBasicProfile();\n  console.log('Token || ' + googleUser.getAuthResponse().id_token);\n  console.log('ID: ' + profile.getId());\n  console.log('Name: ' + profile.getName());\n  console.log('Image URL: ' + profile.getImageUrl());\n  console.log('Email: ' + profile.getEmail());\n */\n","<div class=\"row h-100 align-items-center\">\n  <div class=\"col-12\">\n    <div class=\"my-card mx-auto\">\n      <div class=\"row\">\n        <div class=\"col-6 front-img\"></div>\n        <div class=\"col-6 user-form\">\n          <div class=\"p-5\">\n            <div class=\"text-center logo-container\">\n              <img\n                class=\"logo\"\n                [routerLink]=\"['/']\"\n                src=\"assets/images/gift-box.svg\"\n              />\n              <img\n                class=\"title\"\n                [routerLink]=\"['/']\"\n                src=\"assets/images/logo-text.png\"\n              />\n              <hr />\n            </div>\n            <form class=\"user\" [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n              <div class=\"form-group\">\n                <input\n                  class=\"form-control form-control-user\"\n                  type=\"username\"\n                  formControlName=\"username\"\n                  placeholder=\"Username or Email\"\n                  [ngClass]=\"{\n                    'is-invalid': submitted && loginForm.get('username').invalid\n                  }\"\n                  name=\"username\"\n                />\n                <div\n                  class=\"invalid-feedback\"\n                  *ngIf=\"submitted && loginForm.get('username').invalid\"\n                >\n                  <div *ngIf=\"loginForm.get('username').errors['required']\">\n                    * Required\n                  </div>\n                  <div\n                    *ngIf=\"\n                      loginForm.get('username').errors['serverValidationError']\n                    \"\n                  >\n                    {{\n                      loginForm.controls[\"username\"].errors\n                        .serverValidationError\n                    }}\n                  </div>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <input\n                  class=\"form-control form-control-user\"\n                  type=\"password\"\n                  formControlName=\"password\"\n                  type=\"password\"\n                  id=\"exampleInputPassword\"\n                  placeholder=\"Password\"\n                  name=\"password\"\n                  [ngClass]=\"{\n                    'is-invalid': submitted && loginForm.get('password').invalid\n                  }\"\n                />\n                <div\n                  class=\"invalid-feedback\"\n                  *ngIf=\"submitted && loginForm.get('password').invalid\"\n                >\n                  <div *ngIf=\"loginForm.get('password').errors['required']\">\n                    * Required\n                  </div>\n                  <div\n                    *ngIf=\"\n                      loginForm.get('password').errors['serverValidationError']\n                    \"\n                  >\n                    {{\n                      loginForm.controls[\"password\"].errors\n                        .serverValidationError\n                    }}\n                  </div>\n                </div>\n              </div>\n              \n              <button class=\"primary-btn btn-block\" type=\"submit\">\n                <span\n                  *ngIf=\"loadingService.loading\"\n                  class=\"spinner-border spinner-border-sm\"\n                ></span>\n                Login\n              </button>\n              <a class=\"secondary-btn btn-block\" [routerLink]=\"['/auth/register']\"\n                >Register\n              </a>\n              <br>\n              <br>\n              <div class=\"social\">\n                <img\n                  class=\"social-icon\"\n                  src=\"assets/images/btn_google_normal.svg\"\n                  alt=\"\"\n                  id=\"googleBtn\"\n                />\n                <img\n                  class=\"social-icon icon-bar facebook\"\n                  src=\"assets/images/facebook.svg\"\n                  alt=\"\"\n                  (click)=\"submitLogin()\"\n                />\n              </div>\n              <br />\n            </form>\n            <div class=\"text-center\">\n              <a class=\"actions\" [routerLink]=\"['/auth/forgotpassword']\"\n                >Forgot Password?\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","/**\n * @author Gagandeep Singh\n * @email singh.gagandeep3911@gmail.com\n * @create date 2021-01-22 10:44:27\n * @modify date 2021-01-22 10:44:27\n * @desc [description]\n */\nimport { Component, OnInit } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { Gender } from 'src/app/models/gender.model';\nimport { LoadingService } from 'src/app/services/loading.service';\nimport { ManageUserService } from 'src/app/services/manage-user.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  submitted = false;\n  userForm: UntypedFormGroup;\n  addUserSubscription: Subscription;\n  message = null;\n  maxDate = new Date(new Date().setFullYear(new Date().getFullYear() - 14)).toISOString().slice(0, 10)\n  // new Date().toISOString().slice(0,10) - ;\n\n  constructor(\n    private manageUserService: ManageUserService,\n    public loadingService: LoadingService,\n    private router: Router\n  ) {\n    this.initForm();\n  }\n\n  ngOnInit(): void {}\n\n  submitForm() {\n    this.submitted = true;\n    if (this.userForm.valid) this.addUser(this.userForm.value);\n  }\n\n  addUser(formData) {\n    this.loadingService.enableLoading();\n    this.addUserSubscription = this.manageUserService\n      .addUser(formData)\n      .subscribe(\n        (response) => {\n          this.loadingService.disableLoading();\n          this.message =\n            'Successfully Created user with ID ' + response['userId'];\n          setTimeout(() => {\n            this.router.navigateByUrl('/login');\n          }, 3000);\n        },\n        (error) => {\n          this.loadingService.disableLoading();\n          if (error.error.message === 'FieldException')\n            error.error.errors.forEach((element) =>\n              this.userForm.controls[element.field]?.setErrors({\n                serverValidationError: element.message,\n              })\n            );\n          else throw new Error(error);\n        }\n      );\n  }\n\n  initForm() {\n    this.userForm = new UntypedFormGroup(\n      {\n        firstName: new UntypedFormControl('', [Validators.required]),\n        lastName: new UntypedFormControl('', [Validators.required]),\n        phoneNo: new UntypedFormControl('', [Validators.required]),\n        emailId: new UntypedFormControl('', [Validators.required]),\n        username: new UntypedFormControl('', [Validators.required]),\n        password: new UntypedFormControl('', [Validators.required]),\n        password2: new UntypedFormControl('', [Validators.required]),\n        address: new UntypedFormGroup({\n          state: new UntypedFormControl('', [\n            Validators.required,\n            Validators.minLength(4),\n            Validators.maxLength(30),\n          ]),\n          area: new UntypedFormControl('', [\n            Validators.required,\n            Validators.minLength(4),\n            Validators.maxLength(30),\n          ]),\n          city: new UntypedFormControl('', [\n            Validators.required,\n            Validators.minLength(4),\n            Validators.maxLength(30),\n          ]),\n          pincode: new UntypedFormControl('', [\n            Validators.required,\n            Validators.pattern('[0-9]{6}'),\n          ]),\n        }),\n      },\n      { validators: this.matchPassword }\n    );\n  }\n\n  matchPassword(control: UntypedFormControl) {\n    const password = control.get('password').value;\n    const password2 = control.get('password2').value;\n    if (password != password2) {\n      control.get('password2').setErrors({ passwordMatchError: true });\n    } else {\n      return null;\n    }\n  }\n\n}\n","<div class=\"row h-100 align-items-center\">\n  <div class=\"col-12\">\n    <div class=\"my-card mx-auto\">\n      <div class=\"row\">\n        <!-- <div class=\"col-6 front-img\"></div> -->\n        <div class=\"col-12 user-form\">\n          <div class=\"p-3\">\n            <div class=\"logo-container\">\n              <img [routerLink]=\"['/']\" class=\"title\" src=\"assets/images/logo-text.png\" />\n              <hr>\n            </div>\n            <!-- <div class=\"text-center\">\n              <img class=\"logo\" src=\"assets/images/gift-box.svg\" />\n              <img class=\"title\" src=\"assets/images/logo-text.png\" />\n            </div> -->\n            <form (ngSubmit)=\"submitForm()\" [formGroup]=\"userForm\">\n                  <div class=\"row\">\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                        <label for=\"firstName\"\n                          ><strong>First Name</strong><br /></label\n                        ><input\n                          class=\"form-control\"\n                          formControlName=\"firstName\"\n                          type=\"text\"\n                          placeholder=\"First Name\"\n                          name=\"firstName\"\n                          [ngClass]=\"{'is-invalid': submitted && userForm.get('firstName').invalid}\"\n                        />\n                        <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('firstName').invalid\">\n                          <div *ngIf=\"userForm.get('firstName').errors['required']\">* Required</div>\n                          <div *ngIf=\"userForm.get('firstName').errors['serverValidationError']\"> \n                              {{userForm.controls['firstName'].errors.serverValidationError }} \n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                        <label for=\"lastName\"><strong>Last Name</strong></label\n                        ><input\n                          class=\"form-control\"\n                          formControlName=\"lastName\"\n                          type=\"text\"\n                          placeholder=\"Last Name\"\n                          name=\"lastName\"\n                          [ngClass]=\"{'is-invalid': submitted && userForm.get('lastName').invalid}\"\n                        />\n                        <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('lastName').invalid\">\n                          <div *ngIf=\"userForm.get('lastName').errors['required']\">* Required</div>\n                          <div *ngIf=\"userForm.get('lastName').errors['serverValidationError']\"> \n                              {{userForm.controls['lastName'].errors.serverValidationError }} \n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"row\">\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                        <label for=\"phoneNo\"><strong>Phone No</strong><br /></label\n                        ><input\n                          class=\"form-control\"\n                          type=\"text\"\n                          placeholder=\"Enter Phone No.\"\n                          name=\"phoneNo\"\n                          formControlName=\"phoneNo\"\n                          [ngClass]=\"{'is-invalid': submitted && userForm.get('phoneNo').invalid}\"\n                        />\n                        <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('phoneNo').invalid\">\n                          <div *ngIf=\"userForm.get('phoneNo').errors['required']\">* Required</div>\n                          <div *ngIf=\"userForm.get('phoneNo').errors['serverValidationError']\"> \n                              {{userForm.controls['phoneNo'].errors.serverValidationError }} \n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                        <label for=\"emailId\"><strong>Email</strong><br /></label\n                        ><input\n                          class=\"form-control\"\n                          type=\"text\"\n                          placeholder=\"Email\"\n                          name=\"emailId\"\n                          formControlName=\"emailId\"\n                          [ngClass]=\"{'is-invalid': submitted && userForm.get('emailId').invalid}\"\n                        />\n                        <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('emailId').invalid\">\n                          <div *ngIf=\"userForm.get('emailId').errors['required']\">* Required</div>\n                          <div *ngIf=\"userForm.get('emailId').errors['serverValidationError']\"> \n                              {{userForm.controls['emailId'].errors.serverValidationError }} \n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div>\n                  <div  formGroupName=\"address\">\n                    <div class=\"row\">\n                      <div class=\"col\">\n                        <div class=\"form-group\">\n                          <label for=\"city\"><strong>City</strong></label\n                          ><input\n                            type=\"text\"\n                            class=\"form-control\"\n                            placeholder=\"City\"\n                            name=\"city\"\n                            [ngClass]=\"{'is-invalid': submitted && userForm.get('address.city').invalid}\"\n                            formControlName=\"city\"\n                          />\n                          <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('address.city').invalid\">\n                            <div *ngIf=\"userForm.get('address.city').errors['required']\">* Required</div>\n                            <div *ngIf=\"userForm.get('address.city').errors['minlength']\">Min length ust be 4</div>\n                            <div *ngIf=\"userForm.get('address.city').errors['maxlength']\">Max length must be 30</div>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"col\">\n                        <div class=\"form-group\">\n                          <label for=\"country\"><strong>State</strong></label\n                          ><input\n                            type=\"text\"\n                            class=\"form-control\"\n                            placeholder=\"State\"\n                            name=\"State\"\n                            [ngClass]=\"{'is-invalid': submitted && userForm.get('address.state').invalid}\"\n                            formControlName=\"state\"\n                          />\n                          <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('address.state').invalid\">\n                            <div *ngIf=\"userForm.get('address.state').errors['required']\">* Required</div>\n                            <div *ngIf=\"userForm.get('address.state').errors['minlength']\">Min length ust be 4</div>\n                            <div *ngIf=\"userForm.get('address.state').errors['maxlength']\">Max length must be 30</div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"row\">\n                      <div class=\"col\">\n                        <div class=\"form-group\">\n                          <label for=\"area\"><strong>Area</strong></label\n                          ><input\n                            type=\"text\"\n                            class=\"form-control\"\n                            placeholder=\"Area\"\n                            name=\"area\"\n                            [ngClass]=\"{'is-invalid': submitted && userForm.get('address.area').invalid}\"\n                            formControlName=\"area\"\n                          />\n                          <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('address.area').invalid\">\n                            <div *ngIf=\"userForm.get('address.area').errors['required']\">* Required</div>\n                            <div *ngIf=\"userForm.get('address.area').errors['minlength']\">Min length ust be 4</div>\n                            <div *ngIf=\"userForm.get('address.area').errors['maxlength']\">Max length must be 30</div>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"col\">\n                        <div class=\"form-group\">\n                          <label for=\"pinode\"><strong>pincode</strong></label\n                          ><input\n                            type=\"text\"\n                            class=\"form-control\"\n                            placeholder=\"pincode\"\n                            name=\"pincode\"\n                            formControlName=\"pincode\"\n                            [ngClass]=\"{'is-invalid': submitted && userForm.get('address.pincode').invalid}\"\n                          />\n                          <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('address.pincode').invalid\">\n                            <div *ngIf=\"userForm.get('address.pincode').errors['required']\">* Required</div>\n                            <div *ngIf=\"userForm.get('address.pincode').errors['pattern']\">Must be of length 6</div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                  <div class=\"row\">\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                        <label for=\"password\"><strong>Password</strong></label\n                        ><input\n                          type=\"password\"\n                          class=\"form-control\"\n                          placeholder=\"Enter Password\"\n                          name=\"password\"\n                          formControlName=\"password\"\n                          [ngClass]=\"{'is-invalid': submitted && userForm.get('password').invalid}\"\n                        />\n                        <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('password').invalid\">\n                          <div *ngIf=\"userForm.get('password').errors['required']\">* Required</div>\n                          <div *ngIf=\"userForm.get('password').errors['serverValidationError']\"> \n                              {{userForm.controls['password'].errors.serverValidationError }} \n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                        <label for=\"password2\"\n                          ><strong>Re-enter Password</strong></label\n                        ><input\n                          type=\"password\"\n                          class=\"form-control\"\n                          placeholder=\"Re-enter Password\"\n                          name=\"password2\"\n                          formControlName=\"password2\"\n                          [ngClass]=\"{'is-invalid': submitted && userForm.get('password2').invalid}\"\n                        />\n                        <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('password2').invalid\">\n                          <div *ngIf=\"userForm.get('password2').errors['required']\">* Required</div><div *ngIf=\"userForm.get('password2').errors['passwordMatchError']\">Password not same</div>\n                          <div *ngIf=\"userForm.get('password2').errors['serverValidationError']\"> \n                              {{userForm.controls['password2'].errors.serverValidationError }} \n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"row\">\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                        <label for=\"username\"><strong>Username</strong></label\n                        ><input\n                          type=\"text\"\n                          class=\"form-control\"\n                          placeholder=\"Enter Username\"\n                          name=\"username\"\n                          formControlName=\"username\"\n                          [ngClass]=\"{'is-invalid': submitted && userForm.get('username').invalid}\"\n                        />\n                        <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('username').invalid\">\n                          <div *ngIf=\"userForm.get('username').errors['required']\">* Required</div>\n                          <div *ngIf=\"userForm.get('username').errors['serverValidationError']\"> \n                              {{userForm.controls['username'].errors.serverValidationError }} \n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                        <button class=\"primary-btn btn-block\" type=\"submit\">\n                          <span *ngIf=\"loadingService.loading\" class=\"spinner-border spinner-border-sm\"></span>\n                          Register\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                  <div *ngIf=\"message\" class=\"alert alert-success\" role=\"alert\">\n                    {{message}}\n                  </div>\n            </form>\n            <div class=\"text-center\">\n              <hr>\n              <a class=\"actions\" [routerLink]=\"['/auth/login']\"\n                >Back to Login\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","/**\n * @author Gagandeep Singh\n * @email singh.gagandeep3911@gmail.com\n * @create date 2021-01-22 01:46:20\n * @modify date 2021-01-22 01:46:20\n * @desc [description]\n */\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { EventService } from 'src/app/services/event.service';\nimport { LoadingService } from 'src/app/services/loading.service';\n\n@Component({\n  selector: 'app-request-question',\n  templateUrl: './request-question.component.html',\n  styleUrls: ['./request-question.component.scss'],\n})\nexport class RequestQuestionComponent implements OnInit, OnDestroy {\n  requestQuestionForm: UntypedFormGroup;\n  formSubscription: Subscription;\n  submitted = false;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    public loadingService: LoadingService,\n    private eventService: EventService\n  ) {}\n\n  ngOnDestroy(): void {\n    if (this.formSubscription) this.formSubscription.unsubscribe();\n  }\n\n  ngOnInit(): void {\n    this.initQuestionForm();\n  }\n\n  requestSecretQuestion() {\n    this.submitted = true;\n    if (this.requestQuestionForm.valid)\n      this.submitData(this.requestQuestionForm.value.username);\n  }\n\n  submitData(formData) {\n    this.loadingService.enableLoading();\n    this.formSubscription = this.authService\n      .requestSecretQuestion(formData)\n      .subscribe(\n        (response) => {\n          this.loadingService.disableLoading();\n          this.eventService.resetPasswordData.next(response);\n          this.router.navigateByUrl('/auth/changepassword');\n        },\n        (error) => {\n          this.loadingService.disableLoading();\n          if (error.error.message === 'FieldException')\n            error.error.errors.forEach((element) =>\n              this.requestQuestionForm.controls[element.field]?.setErrors({\n                serverValidationError: element.message,\n              })\n            );\n          else throw new Error(error);\n        }\n      );\n  }\n\n  initQuestionForm() {\n    this.requestQuestionForm = new UntypedFormGroup({\n      username: new UntypedFormControl('', [Validators.required]),\n    });\n  }\n}\n","<div class=\"row h-100 align-items-center\">\n  <div class=\"col-12\">\n    <div class=\"my-card mx-auto\">\n      <div class=\"row\">\n        <div class=\"col-6 front-img\">\n        </div>\n        <div class=\"col-6 user-form\">\n          <div class=\"p-5\">\n            <div class=\"text-center logo-container\">\n              <img class=\"logo\" [routerLink]=\"['/']\" src=\"assets/images/gift-box.svg\" />\n              <img class=\"title\" [routerLink]=\"['/']\" src=\"assets/images/logo-text.png\" />\n              <hr>\n            </div>\n            <form class=\"user\"  [formGroup]=\"requestQuestionForm\" (ngSubmit)=\"requestSecretQuestion()\">\n              <div class=\"form-group\">\n                <input\n                  formControlName=\"username\"\n                  class=\"form-control form-control-user\"\n                  type=\"text\"\n                  placeholder=\"Enter Username\"\n                  name=\"username\"\n                  [ngClass]=\"{'is-invalid': submitted && requestQuestionForm.get('username').invalid}\"\n                />\n                <div class=\"invalid-feedback\" *ngIf=\"submitted && requestQuestionForm.get('username').invalid\">\n                  <div *ngIf=\"requestQuestionForm.get('username').errors['required']\">* Required</div>\n                  <div *ngIf=\"requestQuestionForm.get('username').errors['serverValidationError']\"> \n                      {{requestQuestionForm.controls['username'].errors.serverValidationError }} \n                  </div>\n                </div>\n              </div>\n              <button class=\"primary-btn btn-block\" type=\"submit\">\n                <span *ngIf=\"loadingService.loading\" class=\"spinner-border spinner-border-sm\"></span>\n                Request Secret Question\n              </button>\n            </form>\n            <!-- <hr /> -->\n            <br>\n            <div class=\"text-center\">\n              <a class=\"actions\" [routerLink]=\"['/auth/login']\">Back To Login</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { LoadingService } from 'src/app/services/loading.service';\nimport { SocialAuthService } from 'src/app/services/social-auth.service';\n\n@Component({\n  selector: 'app-social-register',\n  templateUrl: './social-register.component.html',\n  styleUrls: ['./social-register.component.scss'],\n})\nexport class SocialRegisterComponent implements OnInit {\n  email;\n\n  submitted = false;\n  userForm: UntypedFormGroup;\n  addUserSubscription: Subscription;\n  message = null;\n  maxDate = new Date(new Date().setFullYear(new Date().getFullYear() - 14))\n    .toISOString()\n    .slice(0, 10);\n  // new Date().toISOString().slice(0,10) - ;\n\n  constructor(\n    private socialAuthService: SocialAuthService,\n    public loadingService: LoadingService,\n    private router: Router,\n  ) {}\n\n  ngOnInit(): void {\n    this.email = window.history.state?.data?.emailId\n    if (!this.email) this.router.navigateByUrl('/auth/login')\n    this.initForm();\n  }\n\n  submitForm() {\n    this.submitted = true;\n    if (this.userForm.valid) this.addUser(this.userForm.value);\n  }\n\n  addUser(formData) {\n    \n    this.loadingService.enableLoading();\n    this.addUserSubscription = this.socialAuthService\n      .socialSignUp(formData)\n      .subscribe(\n        (response) => {\n          this.loadingService.disableLoading();\n          this.message =\n            'Successfully Added user with ID ' + response['userId'];\n          setTimeout(() => {\n            this.router.navigateByUrl('/');\n          }, 3000);\n        },\n        (error) => {\n          this.loadingService.disableLoading();\n          if (error.error.message === 'FieldException')\n            error.error.errors.forEach((element) =>\n              this.userForm.controls[element.field]?.setErrors({\n                serverValidationError: element.message,\n              })\n            );\n          else throw new Error(error);\n        }\n      );\n  }\n\n  initForm() {\n    this.userForm = new UntypedFormGroup({\n      firstName: new UntypedFormControl('', [Validators.required]),\n      lastName: new UntypedFormControl('', [Validators.required]),\n      phoneNo: new UntypedFormControl('', [Validators.required]),\n      emailId: new UntypedFormControl(this.email, [Validators.required]),\n      address: new UntypedFormGroup({\n        state: new UntypedFormControl('', [\n          Validators.required,\n          Validators.minLength(4),\n          Validators.maxLength(30),\n        ]),\n        area: new UntypedFormControl('', [\n          Validators.required,\n          Validators.minLength(4),\n          Validators.maxLength(30),\n        ]),\n        city: new UntypedFormControl('', [\n          Validators.required,\n          Validators.minLength(4),\n          Validators.maxLength(30),\n        ]),\n        pincode: new UntypedFormControl('', [\n          Validators.required,\n          Validators.pattern('[0-9]{6}'),\n        ]),\n      }),\n    });\n  }\n}\n","<div class=\"row h-100 align-items-center\">\n  <div class=\"col-12\">\n    <div class=\"my-card mx-auto\">\n      <div class=\"row\">\n        <!-- <div class=\"col-6 front-img\"></div> -->\n        <div class=\"col-12 user-form\">\n          <div class=\"p-3\">\n            <div class=\"logo-container\">\n              <img [routerLink]=\"['/']\" class=\"title\" src=\"assets/images/logo-text.png\" />\n              <hr>\n              <h1 class=\"title-main\">\n                You have to do this only Once.\n              </h1>\n            </div>\n            <!-- <div class=\"text-center\">\n              <img class=\"logo\" src=\"assets/images/gift-box.svg\" />\n              <img class=\"title\" src=\"assets/images/logo-text.png\" />\n            </div> -->\n            <form (ngSubmit)=\"submitForm()\" [formGroup]=\"userForm\">\n                  <div class=\"row\">\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                        <label for=\"firstName\"\n                          ><strong>First Name</strong><br /></label\n                        ><input\n                          class=\"form-control\"\n                          formControlName=\"firstName\"\n                          type=\"text\"\n                          placeholder=\"First Name\"\n                          name=\"firstName\"\n                          [ngClass]=\"{'is-invalid': submitted && userForm.get('firstName').invalid}\"\n                        />\n                        <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('firstName').invalid\">\n                          <div *ngIf=\"userForm.get('firstName').errors['required']\">* Required</div>\n                          <div *ngIf=\"userForm.get('firstName').errors['serverValidationError']\"> \n                              {{userForm.controls['firstName'].errors.serverValidationError }} \n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                        <label for=\"lastName\"><strong>Last Name</strong></label\n                        ><input\n                          class=\"form-control\"\n                          formControlName=\"lastName\"\n                          type=\"text\"\n                          placeholder=\"Last Name\"\n                          name=\"lastName\"\n                          [ngClass]=\"{'is-invalid': submitted && userForm.get('lastName').invalid}\"\n                        />\n                        <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('lastName').invalid\">\n                          <div *ngIf=\"userForm.get('lastName').errors['required']\">* Required</div>\n                          <div *ngIf=\"userForm.get('lastName').errors['serverValidationError']\"> \n                              {{userForm.controls['lastName'].errors.serverValidationError }} \n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"row\">\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                        <label for=\"phoneNo\"><strong>Phone No</strong><br /></label\n                        ><input\n                          class=\"form-control\"\n                          type=\"text\"\n                          placeholder=\"Enter Phone No.\"\n                          name=\"phoneNo\"\n                          formControlName=\"phoneNo\"\n                          [ngClass]=\"{'is-invalid': submitted && userForm.get('phoneNo').invalid}\"\n                        />\n                        <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('phoneNo').invalid\">\n                          <div *ngIf=\"userForm.get('phoneNo').errors['required']\">* Required</div>\n                          <div *ngIf=\"userForm.get('phoneNo').errors['serverValidationError']\"> \n                              {{userForm.controls['phoneNo'].errors.serverValidationError }} \n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                        <label for=\"emailId\"><strong>Email</strong><br /></label\n                        ><input\n                          class=\"form-control\"\n                          type=\"email\"\n                          readonly\n                          name=\"emailId\"\n                          formControlName=\"emailId\"\n                          [ngClass]=\"{'is-invalid': submitted && userForm.get('emailId').invalid}\"\n                        />\n                        <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('emailId').invalid\">\n                          <div *ngIf=\"userForm.get('emailId').errors['required']\">* Required</div>\n                          <div *ngIf=\"userForm.get('emailId').errors['serverValidationError']\"> \n                              {{userForm.controls['emailId'].errors.serverValidationError }} \n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div>\n                  <div  formGroupName=\"address\">\n                    <div class=\"row\">\n                      <div class=\"col\">\n                        <div class=\"form-group\">\n                          <label for=\"city\"><strong>City</strong></label\n                          ><input\n                            type=\"text\"\n                            class=\"form-control\"\n                            placeholder=\"City\"\n                            name=\"city\"\n                            [ngClass]=\"{'is-invalid': submitted && userForm.get('address.city').invalid}\"\n                            formControlName=\"city\"\n                          />\n                          <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('address.city').invalid\">\n                            <div *ngIf=\"userForm.get('address.city').errors['required']\">* Required</div>\n                            <div *ngIf=\"userForm.get('address.city').errors['minlength']\">Min length ust be 4</div>\n                            <div *ngIf=\"userForm.get('address.city').errors['maxlength']\">Max length must be 30</div>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"col\">\n                        <div class=\"form-group\">\n                          <label for=\"country\"><strong>State</strong></label\n                          ><input\n                            type=\"text\"\n                            class=\"form-control\"\n                            placeholder=\"State\"\n                            name=\"State\"\n                            [ngClass]=\"{'is-invalid': submitted && userForm.get('address.state').invalid}\"\n                            formControlName=\"state\"\n                          />\n                          <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('address.state').invalid\">\n                            <div *ngIf=\"userForm.get('address.state').errors['required']\">* Required</div>\n                            <div *ngIf=\"userForm.get('address.state').errors['minlength']\">Min length ust be 4</div>\n                            <div *ngIf=\"userForm.get('address.state').errors['maxlength']\">Max length must be 30</div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"row\">\n                      <div class=\"col\">\n                        <div class=\"form-group\">\n                          <label for=\"area\"><strong>Area</strong></label\n                          ><input\n                            type=\"text\"\n                            class=\"form-control\"\n                            placeholder=\"Area\"\n                            name=\"area\"\n                            [ngClass]=\"{'is-invalid': submitted && userForm.get('address.area').invalid}\"\n                            formControlName=\"area\"\n                          />\n                          <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('address.area').invalid\">\n                            <div *ngIf=\"userForm.get('address.area').errors['required']\">* Required</div>\n                            <div *ngIf=\"userForm.get('address.area').errors['minlength']\">Min length ust be 4</div>\n                            <div *ngIf=\"userForm.get('address.area').errors['maxlength']\">Max length must be 30</div>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"col\">\n                        <div class=\"form-group\">\n                          <label for=\"pinode\"><strong>pincode</strong></label\n                          ><input\n                            type=\"text\"\n                            class=\"form-control\"\n                            placeholder=\"pincode\"\n                            name=\"pincode\"\n                            formControlName=\"pincode\"\n                            [ngClass]=\"{'is-invalid': submitted && userForm.get('address.pincode').invalid}\"\n                          />\n                          <div class=\"invalid-feedback\" *ngIf=\"submitted && userForm.get('address.pincode').invalid\">\n                            <div *ngIf=\"userForm.get('address.pincode').errors['required']\">* Required</div>\n                            <div *ngIf=\"userForm.get('address.pincode').errors['pattern']\">Must be of length 6</div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                  <div class=\"row\">\n                    <div class=\"col\">\n                      <div class=\"form-group\">\n                        <button class=\"primary-btn btn-block\" type=\"submit\">\n                          <span *ngIf=\"loadingService.loading\" class=\"spinner-border spinner-border-sm\"></span>\n                          Register\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                  <div *ngIf=\"message\" class=\"alert alert-success\" role=\"alert\">\n                    {{message}}\n                  </div>\n            </form>\n            <div class=\"text-center\">\n              <hr>\n              <a class=\"actions\" [routerLink]=\"['/auth/login']\"\n                >Back to Login\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","/**\n * @author Gagandeep Singh\n * @email singh.gagandeep3911@gmail.com\n * @create date 2021-01-29 14:12:31\n * @modify date 2021-01-29 14:12:31\n * @desc Prevents logged in user from accessing Auth pages\n */\nimport { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthAccessGuard implements CanActivate {\n  constructor(private authServie: AuthService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    if (this.authServie.isAuthenticated()) {\n      this.router.navigateByUrl('/');\n      return false;\n    }\n    return true;\n  }\n}\n","/**\n * @author Gagandeep Singh\n * @email singh.gagandeep3911@gmail.com\n * @create date 2021-01-29 10:40:53\n * @modify date 2021-01-29 10:40:53\n * @desc [description]\n */\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { User } from '../models/user.model';\nimport { AuthService } from './auth.service';\nimport { EventService } from './event.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SocialAuthService {\n  authServiceUrl = `${environment.protocol}${environment.applicationUrl}/social`;\n\n  constructor(\n    private http: HttpClient,\n    private eventServie: EventService,\n    private authService: AuthService\n  ) {}\n\n  validateGoogleTokenAndLogin(data) {\n    return this.http\n      .post(`${this.authServiceUrl}/google`, data)\n      .pipe(tap((user: User) => this.triggerLogin(user)));\n  }\n\n  validateFacebookTokenAndLogin(data) {\n    return this.http\n      .post(`${this.authServiceUrl}/facebook`, data)\n      .pipe(tap((user: User) => this.triggerLogin(user)));\n  }\n\n  socialSignUp(data) {\n    return this.http\n      .post(`${this.authServiceUrl}/signup`, data)\n      .pipe(tap((user: User) => this.triggerLogin(user)));\n  }\n\n  triggerLogin(user: User) {\n    this.authService.saveToSessionStorage(user);\n    this.eventServie.loggedInUser.next(user);\n  }\n}\n"],"names":["RouterModule","AuthAccessGuard","AuthComponent","ChangePasswordComponent","LoginComponent","RegisterComponent","RequestQuestionComponent","SocialRegisterComponent","routes","path","component","canActivate","children","AuthRoutingModule","forChild","imports","exports","constructor","ngOnInit","selectors","decls","vars","consts","template","i0","CommonModule","ReactiveFormsModule","SharedModule","AuthModule","declarations","UntypedFormGroup","UntypedFormControl","Validators","authService","loadingService","router","eventService","ngOnDestroy","resetPasswordSubscription","unsubscribe","initPasswordResetForm","resetPassword","submitted","resetPasswordForm","valid","submitResetForm","getRawValue","formData","username","enableLoading","requestPasswordReset","subscribe","response","success","setTimeout","navigateByUrl","disableLoading","error","message","errors","forEach","element","controls","field","setErrors","serverValidationError","Error","res","resetPasswordData","value","question","securityQuestion","disabled","required","newPassword","securityAnswer","ctx","environment","route","socialAuthService","ngZone","loginSubscription","redirectIfLoggedIn","returnUrl","snapshot","queryParams","initForm","window","googleLogin","login","loginForm","submitData","password","googleInit","gapi","load","auth2","init","client_id","googleClientId","attachSignin","document","getElementById","attachClickHandler","googleUser","run","validateGoogleTokenAndLogin","token","getAuthResponse","id_token","email","getBasicProfile","getEmail","navigate","state","data","emailId","closed","console","ngAfterViewInit","facebookInit","fbAsyncInit","FB","appId","facebookClientId","cookie","xfbml","version","AppEvents","logPageView","d","s","id","js","fjs","getElementsByTagName","createElement","src","parentNode","insertBefore","submitLogin","authResponse","api","fields","validateFacebookTokenAndLogin","accessToken","manageUserService","Date","setFullYear","getFullYear","toISOString","slice","submitForm","userForm","addUser","addUserSubscription","firstName","lastName","phoneNo","password2","address","minLength","maxLength","area","city","pincode","pattern","validators","matchPassword","control","get","passwordMatchError","formSubscription","initQuestionForm","requestSecretQuestion","requestQuestionForm","next","history","socialSignUp","authServie","isAuthenticated","factory","providedIn","tap","SocialAuthService","http","eventServie","protocol","applicationUrl","post","authServiceUrl","pipe","user","triggerLogin","saveToSessionStorage","loggedInUser"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}